import csv
import datetime
import random
import time
import json
import paho.mqtt.client as mqtt

# --- C·∫•u h√¨nh ---
BROKER = "karis.cloud"
PORT = 1883
DEVICE_ID = "esp32_6relay"
TOPIC_CONTROL = f"irrigation/{DEVICE_ID}/control"
TOPIC_STATUS = f"irrigation/{DEVICE_ID}/status" # V·∫´n subscribe ƒë·ªÉ theo d√µi n·∫øu c√≥ ph·∫£n h·ªìi
API_KEY = "8a679613-019f-4b88-9068-da10f09dcdd2"

NUM_COMMANDS = 50  # S·ªë l∆∞·ª£ng l·ªánh s·∫Ω g·ª≠i (tƒÉng l√™n ƒë·ªÉ stress test)
SEND_INTERVAL = 0.5 # Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn g·ª≠i l·ªánh (gi√¢y)
RELAY_IDS = [1, 2, 3, 4, 5, 6]

# Danh s√°ch l∆∞u tr·ªØ log c√°c l·ªánh ƒë√£ g·ª≠i
commands_sent_log = []

# --- H√†m Callback MQTT ---
def on_connect(client, userdata, flags, rc):
    """Callback khi client nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi CONNACK t·ª´ server."""
    if rc == 0:
        print("ƒê√£ k·∫øt n·ªëi t·ªõi MQTT Broker!")
        client.subscribe(TOPIC_STATUS) # Subscribe v√†o topic tr·∫°ng th√°i ƒë·ªÉ quan s√°t
        print(f"ƒê√£ subscribe v√†o topic: {TOPIC_STATUS}")
    else:
        print(f"K·∫øt n·ªëi th·∫•t b·∫°i, m√£ l·ªói: {rc}\n")

def on_message(client, userdata, msg):
    """Callback khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn PUBLISH t·ª´ server."""
    # H√†m n√†y gi·ªù ch·ªâ d√πng ƒë·ªÉ quan s√°t, kh√¥ng ·∫£nh h∆∞·ªüng v√≤ng l·∫∑p g·ª≠i l·ªánh.
    print(f"Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tr√™n topic {msg.topic}: {msg.payload.decode()}")
    # B·∫°n c√≥ th·ªÉ t√πy ch·ªçn ghi log c√°c tin nh·∫Øn tr·∫°ng th√°i nh·∫≠n ƒë∆∞·ª£c v√†o file ho·∫∑c danh s√°ch ri√™ng
    # Hi·ªán t·∫°i, ch·ªâ in ra console.

def get_time_period():
    """X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian trong ng√†y."""
    hour = datetime.datetime.now().hour
    if 5 <= hour < 12:
        return "morning"
    elif 12 <= hour < 18:
        return "afternoon"
    else:
        return "evening"

# --- K·ªãch b·∫£n ch√≠nh ---
# Kh·ªüi t·∫°o MQTT client
client_id = f"stress_test_sender_{random.randint(0,10000)}"
client = mqtt.Client(client_id=client_id) # S·ª≠ d·ª•ng client_id duy nh·∫•t
client.on_connect = on_connect
client.on_message = on_message

# K·∫øt n·ªëi t·ªõi broker
try:
    client.connect(BROKER, PORT, 60)
except Exception as e:
    print(f"L·ªói k·∫øt n·ªëi t·ªõi MQTT Broker: {e}")
    exit()

# B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p client MQTT ƒë·ªÉ x·ª≠ l√Ω l∆∞u l∆∞·ª£ng m·∫°ng, dispatches, v√† callbacks
# Ch·∫°y trong m·ªôt lu·ªìng ri√™ng
client.loop_start()

# V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ g·ª≠i l·ªánh
print(f"B·∫Øt ƒë·∫ßu g·ª≠i {NUM_COMMANDS} l·ªánh, m·ªói l·ªánh c√°ch nhau {SEND_INTERVAL} gi√¢y...")
for i in range(NUM_COMMANDS):
    # 1. Chu·∫©n b·ªã payload l·ªánh
    relays_payload = []
    current_target_states = {} # L∆∞u tr·∫°ng th√°i m·ª•c ti√™u c·ªßa l·ªánh n√†y ƒë·ªÉ ghi log

    print(f"\nüîÅ ƒêang g·ª≠i L·ªánh {i+1}/{NUM_COMMANDS}")

    for rid in RELAY_IDS:
        state = bool(random.getrandbits(1)) # ƒê·∫∑t tr·∫°ng th√°i relay ng·∫´u nhi√™n
        current_target_states[rid] = state
        relays_payload.append({"id": rid, "state": state})

    command_payload_json = {
        "api_key": API_KEY,
        "relays": relays_payload
    }
    command_payload_str = json.dumps(command_payload_json)

    # 2. Publish l·ªánh
    timestamp_sent_dt = datetime.datetime.now()
    timestamp_sent_iso = timestamp_sent_dt.isoformat()

    # G·ª≠i tin nh·∫Øn
    publish_result = client.publish(TOPIC_CONTROL, command_payload_str, qos=0) # S·ª≠ d·ª•ng QoS 0 cho t·ªëc ƒë·ªô cao
    
    # (T√πy ch·ªçn) Ch·ªù publish ho√†n t·∫•t, h·ªØu √≠ch cho QoS > 0. V·ªõi QoS 0, n√≥ tr·∫£ v·ªÅ g·∫ßn nh∆∞ ngay l·∫≠p t·ª©c.
    # publish_result.wait_for_publish(timeout=1) 

    if publish_result.rc == mqtt.MQTT_ERR_SUCCESS:
        print(f"L·ªánh {i+1} ƒë√£ publish th√†nh c√¥ng t·ªõi {TOPIC_CONTROL} l√∫c {timestamp_sent_dt.strftime('%H:%M:%S.%f')[:-3]}")
    else:
        print(f"Th·∫•t b·∫°i khi publish l·ªánh {i+1}. M√£ l·ªói: {publish_result.rc}")


    # 3. Ghi log l·ªánh ƒë√£ g·ª≠i
    command_log_entry = {
        "command_index": i + 1,
        "timestamp_sent": timestamp_sent_iso,
        "period": get_time_period(),
        "payload_sent": command_payload_str,
        "target_states_summary": str(current_target_states) # Ghi l·∫°i t√≥m t·∫Øt tr·∫°ng th√°i m·ª•c ti√™u
    }
    commands_sent_log.append(command_log_entry)

    # 4. Ch·ªù kho·∫£ng th·ªùi gian SEND_INTERVAL tr∆∞·ªõc khi g·ª≠i l·ªánh ti·∫øp theo
    time.sleep(SEND_INTERVAL)

# D·ª´ng v√≤ng l·∫∑p client MQTT
client.loop_stop()
client.disconnect()
print("\nƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MQTT Broker.")

# Ghi log c√°c l·ªánh ƒë√£ g·ª≠i ra file CSV
csv_file_name = "stress_test_commands_sent_log.csv"
try:
    with open(csv_file_name, mode="w", newline="", encoding="utf-8") as file:
        # X√°c ƒë·ªãnh fieldnames d·ª±a tr√™n c√°c key trong command_log_entry
        fieldnames = ["command_index", "timestamp_sent", "period", "payload_sent", "target_states_summary"]
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for record in commands_sent_log:
            writer.writerow(record)
    print(f"‚úÖ Log l·ªánh ƒë√£ g·ª≠i ƒë∆∞·ª£c l∆∞u v√†o file CSV: {csv_file_name}")
except IOError as e:
    print(f"L·ªói khi ghi file CSV: {e}")

